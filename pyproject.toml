[project]
name = "hyperstack-cloud-ansible"
version = "0.1.0"
description = "Ansible collection for managing Hyperstack Cloud resources"
requires-python = ">=3.9"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Davi Mello", email = "davi@ollem.io"}
]
keywords = ["ansible", "hyperstack", "cloud", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "ansible-core>=2.14.0",
]

[project.optional-dependencies]
# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=7.0.0",
]

# Development dependencies
dev = [
    "pre-commit>=3.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

# CI/CD dependencies
ci = [
    "tox>=4.0.0",
    "ansible-lint>=6.0.0",
    "yamllint>=1.29.0",
]

# Documentation dependencies
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
    "sphinx-ansible-theme>=0.9.0",
]

# All development dependencies
all = [
    "hyperstack-cloud-ansible[test,dev,ci,docs]",
]

[project.urls]
Homepage = "https://github.com/dsmello/hyperstack-cloud-ansible"
Documentation = "https://hyperstack-cloud-ansible.readthedocs.io/"
Repository = "https://github.com/dsmello/hyperstack-cloud-ansible.git"
"Bug Tracker" = "https://github.com/dsmello/hyperstack-cloud-ansible/issues"

[build-system]
requires = ["hatchling>=1.13.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["hyperstack"]

[tool.hatch.build.targets.sdist]
include = [
    "/hyperstack",
    "/docs",
    "/tests",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=hyperstack",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["hyperstack"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black formatting
[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
]

[tool.pylint.format]
max-line-length = 120

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]

[dependency-groups]
ci = [
    "ansible-lint>=6.8.7",
    "tox>=4.27.0",
    "yamllint>=1.37.1",
]
dev = [
    "bandit>=1.8.5",
    "black>=25.1.0",
    "flake8>=7.3.0",
    "isort>=6.0.1",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pylint>=3.3.7",
    "safety>=3.5.2",
]
test = [
    "coverage>=7.9.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "pytest-xdist>=3.7.0",
]
