---
name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write

env:
  COLLECTION_NAMESPACE: hyperstack
  COLLECTION_NAME: cloud
  PYTHON_VERSION: '3.11'
  ANSIBLE_VERSION: '2.17'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            TAG=${GITHUB_REF#refs/tags/}
            IS_PRERELEASE=$(echo $VERSION | grep -E '(alpha|beta|rc)' && echo true || echo false)
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v$VERSION"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            echo "::error::Invalid trigger for release workflow"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "Release version: $VERSION"
          echo "Release tag: $TAG"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+([\\-+][a-zA-Z0-9\\.-]*)?$ ]]; then
            echo "::error::Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        ansible-version: ['2.15', '2.16', '2.17']
        exclude:
          - python-version: '3.12'
            ansible-version: '2.15'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv add "ansible-core>=${{ matrix.ansible-version }}.0,<${{ matrix.ansible-version }}.99"
          uv add ansible
          uv add pytest
          uv add pytest-cov
          uv add pytest-mock

      - name: Run ansible-test sanity
        run: |
          source <(uv venv --quiet)
          cd hyperstack/ansible_collections/hyperstack/cloud
          ansible-test sanity --python ${{ matrix.python-version }} --verbose

      - name: Run unit tests
        run: |
          source <(uv venv --quiet)
          cd hyperstack/ansible_collections/hyperstack/cloud
          python -m pytest tests/unit/ -v --cov=plugins --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == env.PYTHON_VERSION && matrix.ansible-version == env.ANSIBLE_VERSION
        with:
          file: hyperstack/ansible_collections/hyperstack/cloud/coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}-${{ matrix.ansible-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv add ansible-core
          uv add ansible

      - name: Install Ansible collection
        run: |
          source <(uv venv --quiet)
          ansible-galaxy collection build hyperstack/ansible_collections/hyperstack/cloud
          ansible-galaxy collection install hyperstack-cloud-*.tar.gz

      - name: Run integration tests
        env:
          API_KEY_HYPER_STACK: ${{ secrets.API_KEY_HYPER_STACK }}
        run: |
          source <(uv venv --quiet)
          ansible-playbook tests/integration_test_cloud_provider.yml -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            tests/
            /tmp/hyperstack_mock_state.json
          if-no-files-found: ignore

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './hyperstack/ansible_collections/hyperstack/cloud'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: [validate, quality-gate]
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}
      collection-path: ${{ steps.build.outputs.collection-path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv add ansible-core
          uv add ansible

      - name: Update collection version
        run: |
          cd hyperstack/ansible_collections/hyperstack/cloud
          sed -i "s/version: .*/version: ${{ needs.validate.outputs.version }}/" galaxy.yml
          
      - name: Validate galaxy.yml
        run: |
          source <(uv venv --quiet)
          cd hyperstack/ansible_collections/hyperstack/cloud
          ansible-galaxy collection build --force --verbose
          
      - name: Build collection
        id: build
        run: |
          source <(uv venv --quiet)
          cd hyperstack/ansible_collections/hyperstack/cloud
          ansible-galaxy collection build --force --verbose
          
          COLLECTION_FILE=$(ls hyperstack-cloud-*.tar.gz)
          echo "artifact-name=${COLLECTION_FILE}" >> $GITHUB_OUTPUT
          echo "collection-path=hyperstack/ansible_collections/hyperstack/cloud/${COLLECTION_FILE}" >> $GITHUB_OUTPUT
          
          echo "Built collection: ${COLLECTION_FILE}"

      - name: Test collection installation
        run: |
          source <(uv venv --quiet)
          cd hyperstack/ansible_collections/hyperstack/cloud
          ansible-galaxy collection install hyperstack-cloud-*.tar.gz --force
          ansible-doc hyperstack.cloud.cloud_manager

      - name: Upload collection artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-${{ needs.validate.outputs.version }}
          path: ${{ steps.build.outputs.collection-path }}
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, integration-tests]
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download collection artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-${{ needs.validate.outputs.version }}
          path: ./artifacts

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            awk '/^## \[?'${{ needs.validate.outputs.version }}'\]?/{flag=1; next} /^## /{flag=0} flag' CHANGELOG.md > release_notes.md
          else
            echo "Release ${{ needs.validate.outputs.version }}" > release_notes.md
            echo "" >> release_notes.md
            echo "Changes in this release:" >> release_notes.md
            git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD~10)..HEAD >> release_notes.md
          fi
          
          echo "Release notes generated:"
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          files: |
            artifacts/*
          generate_release_notes: true
          make_latest: ${{ needs.validate.outputs.is_prerelease == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-galaxy:
    name: Publish to Ansible Galaxy
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    if: ${{ !github.event.inputs.dry_run && needs.validate.outputs.is_prerelease == 'false' }}
    environment: production
    
    steps:
      - name: Download collection artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-${{ needs.validate.outputs.version }}
          path: ./artifacts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install ansible-core
        run: uv add ansible-core

      - name: Publish to Ansible Galaxy
        run: |
          source <(uv venv --quiet)
          cd artifacts
          ansible-galaxy collection publish *.tar.gz --api-key ${{ secrets.GALAXY_API_KEY }} --verbose
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

      - name: Verify publication
        run: |
          source <(uv venv --quiet)
          # Wait a bit for Galaxy to process
          sleep 30
          ansible-galaxy collection install ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }}:${{ needs.validate.outputs.version }} --verbose

  publish-prerelease:
    name: Publish Pre-release to Galaxy
    runs-on: ubuntu-latest
    needs: [validate, build, create-release]
    if: ${{ !github.event.inputs.dry_run && needs.validate.outputs.is_prerelease == 'true' }}
    environment: staging
    
    steps:
      - name: Download collection artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-${{ needs.validate.outputs.version }}
          path: ./artifacts

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Install ansible-core
        run: uv add ansible-core

      - name: Publish pre-release to Ansible Galaxy
        run: |
          source <(uv venv --quiet)
          cd artifacts
          ansible-galaxy collection publish *.tar.gz --api-key ${{ secrets.GALAXY_API_KEY }} --verbose
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, publish-galaxy, publish-prerelease]
    if: always() && !cancelled() && !github.event.inputs.dry_run
    
    steps:
      - name: Notify success
        if: needs.publish-galaxy.result == 'success' || needs.publish-prerelease.result == 'success'
        run: |
          echo "✅ Successfully released ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }} v${{ needs.validate.outputs.version }}"
          echo "📦 Available at: https://galaxy.ansible.com/${{ env.COLLECTION_NAMESPACE }}/${{ env.COLLECTION_NAME }}"
          echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"

      - name: Notify failure
        if: needs.publish-galaxy.result == 'failure' || needs.publish-prerelease.result == 'failure'
        run: |
          echo "❌ Failed to release ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }} v${{ needs.validate.outputs.version }}"
          exit 1