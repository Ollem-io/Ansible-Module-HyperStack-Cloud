name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (build only, do not publish)'
        required: false
        default: false
        type: boolean

# Grant permissions for the workflow to write to contents (for releases) and packages.
permissions:
  contents: write
  packages: write
  id-token: write

# Environment variables available to all jobs
env:
  COLLECTION_NAMESPACE: hyperstack
  COLLECTION_NAME: cloud
  PYTHON_VERSION: '3.11'
  ANSIBLE_VERSION: '2.17'
  COLLECTION_ROOT: hyperstack/ansible_collections/hyperstack/cloud

# Concurrency control to prevent multiple runs for the same ref from running at the same time.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # =================================================================
  #  VALIDATE: Determines version, tag, and prerelease status.
  # =================================================================
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for changelog generation

      - name: Determine version and prerelease status
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
            TAG="$GITHUB_REF_NAME"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${{ github.event.inputs.version }}"
          else
            echo "::error::Unsupported event for release: ${{ github.event_name }}. This workflow runs on tag pushes or manual dispatch."
            exit 1
          fi
          
          # Check if the version string indicates a pre-release
          if [[ "$VERSION" =~ (-alpha|-beta|-rc) ]]; then
            IS_PRERELEASE="true"
          else
            IS_PRERELEASE="${{ github.event.inputs.prerelease || 'false' }}"
          fi
          
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "is_prerelease=${IS_PRERELEASE}" >> "$GITHUB_OUTPUT"
          
          echo "Release Version: ${VERSION}"
          echo "Release Tag: ${TAG}"
          echo "Is Prerelease: ${IS_PRERELEASE}"

      - name: Validate version format (Semantic Versioning)
        run: |
          if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
            echo "::error::Invalid semantic version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

  # =================================================================
  #  QUALITY-GATE: Runs tests across multiple Python/Ansible versions.
  # =================================================================
  quality-gate:
    name: Quality Gate (Python ${{ matrix.python-version }}, Ansible ${{ matrix.ansible-version }})
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        ansible-version: ['2.15', '2.16', '2.17']
        exclude:
          # Ansible 2.15 does not support Python 3.12
          - python-version: '3.12'
            ansible-version: '2.15'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv add "ansible-core>=${{ matrix.ansible-version }}.0,<${{ matrix.ansible-version }}.99"
          uv add ansible pytest pytest-cov pytest-mock

      - name: Run ansible-test sanity
        run: |
          source <(uv venv --quiet)
          cd ${{ env.COLLECTION_ROOT }}
          ansible-test sanity --python ${{ matrix.python-version }} --verbose

      - name: Run unit tests and generate coverage report
        run: |
          source <(uv venv --quiet)
          cd ${{ env.COLLECTION_ROOT }}
          pytest tests/unit/ -v --cov=plugins --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == env.PYTHON_VERSION && matrix.ansible-version == env.ANSIBLE_VERSION
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ${{ env.COLLECTION_ROOT }}/coverage.xml
          flags: unittests
          name: codecov-py${{ matrix.python-version }}-ansible${{ matrix.ansible-version }}
          fail_ci_if_error: false

  # =================================================================
  #  SECURITY: Scans for vulnerabilities.
  # =================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Ensure results are uploaded even if vulnerabilities are found
        with:
          sarif_file: 'trivy-results.sarif'

  # =================================================================
  #  BUILD: Builds and packages the Ansible Collection.
  # =================================================================
  build:
    name: Build Collection
    runs-on: ubuntu-latest
    needs: [validate, quality-gate]
    outputs:
      artifact-name: ${{ steps.build_collection.outputs.artifact-name }}
      artifact-path: ${{ steps.build_collection.outputs.artifact-path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install Ansible
        run: uv add ansible-core

      - name: Update collection version in galaxy.yml
        run: |
          sed -i "s/^\(version:\s*\).*/\1${{ needs.validate.outputs.version }}/" ${{ env.COLLECTION_ROOT }}/galaxy.yml
          echo "Updated galaxy.yml to version ${{ needs.validate.outputs.version }}"
          
      - name: Build collection
        id: build_collection
        run: |
          source <(uv venv --quiet)
          cd ${{ env.COLLECTION_ROOT }}
          ansible-galaxy collection build --force --verbose
          
          ARTIFACT_NAME=$(ls ${{ env.COLLECTION_NAMESPACE }}-${{ env.COLLECTION_NAME }}-*.tar.gz)
          echo "Built collection artifact: ${ARTIFACT_NAME}"
          
          echo "artifact-name=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "artifact-path=${{ env.COLLECTION_ROOT }}/${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload collection artifact
        uses: actions/upload-artifact@v4
        with:
          name: collection-artifact
          path: ${{ steps.build_collection.outputs.artifact-path }}
          retention-days: 7

  # =================================================================
  #  INTEGRATION-TESTS: Runs integration tests against the built collection.
  # =================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: ${{ !fromJSON(inputs.dry_run || 'false') }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download collection artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-artifact
          path: .

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies and collection
        run: |
          uv add ansible-core
          source <(uv venv --quiet)
          ansible-galaxy collection install ${{ needs.build.outputs.artifact-name }} --force

      - name: Run integration tests
        env:
          API_KEY_HYPER_STACK: ${{ secrets.API_KEY_HYPER_STACK }}
        run: |
          source <(uv venv --quiet)
          ansible-playbook tests/integration_test_cloud_provider.yml -v

  # =================================================================
  #  PUBLISH: Creates GitHub Release and publishes to Ansible Galaxy.
  # =================================================================
  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [validate, build, integration-tests]
    # Only run if not a dry run.
    if: ${{ !fromJSON(github.event.inputs.dry_run || 'false') }}
    # Use a production environment for full releases.
    environment: ${{ needs.validate.outputs.is_prerelease == 'true' && 'staging' || 'production' }}
    
    steps:
      - name: Download collection artifact
        uses: actions/download-artifact@v4
        with:
          name: collection-artifact
          path: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: "Release ${{ needs.validate.outputs.version }}"
          generate_release_notes: true # Auto-generates release notes from commits
          prerelease: ${{ fromJSON(needs.validate.outputs.is_prerelease) }}
          files: ${{ needs.build.outputs.artifact-name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to Ansible Galaxy
        run: |
          ansible-galaxy collection publish ${{ needs.build.outputs.artifact-name }} --api-key ${{ secrets.GALAXY_API_KEY }} --verbose
        env:
          GALAXY_API_KEY: ${{ secrets.GALAXY_API_KEY }}

  # =================================================================
  #  NOTIFY: Notifies of the final release status.
  # =================================================================
  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always() && !fromJSON(github.event.inputs.dry_run || 'false')
    
    steps:
      - name: Notify on Success
        if: needs.publish.result == 'success'
        run: |
          echo "✅ Successfully published ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }} v${{ needs.validate.outputs.version }}"
          echo "🏷️ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }}"
          echo "📦 Ansible Galaxy: https://galaxy.ansible.com/${{ env.COLLECTION_NAMESPACE }}/${{ env.COLLECTION_NAME }}/"

      - name: Notify on Failure
        if: needs.publish.result != 'success'
        run: |
          echo "❌ Failed to publish ${{ env.COLLECTION_NAMESPACE }}.${{ env.COLLECTION_NAME }} v${{ needs.validate.outputs.version }}"
          echo "Check the 'publish' job for logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          exit 1
